What is Automation Testing?
Automation Testing is the method of testing software products with special testing tools and frameworks to minimize human intervention and maximize quality.

Automation Testing
Automation Testing is done with the help of automation software, and it controls the flow of the execution of tests as per the written test scripts. They are then compared with predicted outcomes to ensure the quality and reliability of the application. With Automation Testing, one can perform necessary repetitive tasks and those tasks that are hard to achieve with manual testing. Therefore, this type of testing is critical for CI/CD pipelines.


Why Automation Testing?
When a company develops a product, it is bound to have defects. So, before the release of the product, the company needs to capture the flaws in it to provide a seamless user experience. It is the responsibility of the testing team to perform various kinds of testing, from functional to non-functional, to ensure the effectiveness, efficiency, and better user experience of the overall product.

Though testers do Manual and Automation testing both, doing Automation Testing eases a lot of manual work, provides accurate results, and saves up a lot of time, which results in the quicker delivery of the product.

Test Automation is the best way to increase the effectiveness, test coverage, and execution speed in software testing. Automated software testing is important due to the following reasons:
- Manual Testing of all workflows, all fields, all negative scenarios is time and money consuming
- It is difficult to test for multilingual sites manually
- Test Automation in software testing does not require Human intervention. You can run automated test unattended (overnight)
- Test Automation increases the speed of test execution
- Automation helps increase Test Coverage
- Manual Testing can become boring and hence error-prone.



Which Test Cases to Automate?
Test cases to be automated can be selected using the following criterion to increase the automation ROI
- High Risk – Business Critical test cases
- Test cases that are repeatedly executed
- Test Cases that are very tedious or difficult to perform manually
- Test Cases which are time-consuming

The following category of test cases are not suitable for automation:
- Test Cases that are newly designed and not executed manually at least once
- Test Cases for which the requirements are frequently changing
- Test cases which are executed on an ad-hoc basis.


Automated Testing Process:
Following steps are followed in an Automation Process

Step 1) Test Tool Selection
Step 2) Define scope of Automation
Step 3) Planning, Design and Development
Step 4) Test Execution
Step 5) Maintenance


Test tool selection
Test Tool selection largely depends on the technology the Application Under Test is built on. For instance, QTP does not support Informatica. So QTP cannot be used for testing Informatica applications. It’s a good idea to conduct a Proof of Concept of Tool on AUT.


Define the scope of Automation
The scope of automation is the area of your Application Under Test which will be automated. Following points help determine scope:

The features that are important for the business
- Scenarios which have a large amount of data
- Common functionalities across applications
- Technical feasibility
- The extent to which business components are reused
- The complexity of test cases
- Ability to use the same test cases for cross-browser testing


Planning, Design, and Development
During this phase, you create an Automation strategy & plan, which contains the following details-
- Automation tools selected
- Framework design and its features
- In-Scope and Out-of-scope items of automation
- Automation testbed preparation
- Schedule and Timeline of scripting and execution
- Deliverables of Automation Testing



Test Execution
Automation Scripts are executed during this phase. The scripts need input test data before there are set to run. Once executed they provide detailed test reports.

Execution can be performed using the automation tool directly or through the Test Management tool which will invoke the automation tool.

Example: Quality center is the Test Management tool which in turn it will invoke QTP for execution of automation scripts. Scripts can be executed in a single machine or a group of machines. The execution can be done during the night, to save time.



Test Automation Maintenance Approach
Test Automation Maintenance Approach is an automation testing phase carried out to test whether the new functionalities added to the software are working fine or not. Maintenance in automation testing is executed when new automation scripts are added and need to be reviewed and maintained in order to improve the effectiveness of automation scripts with each successive release cycle.


Setting up the Test Environment
You need to set up a remote machine or a machine where the test cases can be run. It should cover an extensive test coverage range for different test scenarios, different browsers, support desktop, and mobile applications.


Automation Test Script Execution
In this step, you will execute the test scripts and check whether the scripts run correctly or not. This step involves all the functional aspects and compatibility across multiple platforms. You also need to generate a bug report if the test case fails.


Analysis and the Generation of Test Results and Test Reports
This is the last phase of the testing life cycle. Here, you will analyze the test reports to determine whether they need additional testing or not. Then, the generation of test results is done to confirm if the test scripts can identify errors in the application. Finally, the test reports are shared with the members/clients who are involved in the project.


Framework for Automation
A framework is set of automation guidelines which help in

Maintaining consistency of Testing
- Improves test structuring
- Minimum usage of code
- Less Maintenance of code
- Improve re-usability
- Non Technical testers can be involved in code
- The training period of using the tool can be reduced
- Involves Data wherever appropriate

There are many types of frameworks used in automation software testing:
1. Linear Framework
This is the simplest framework of all. Under this framework, you need to write a simple code to run the test cases without any modularity or sequential steps. It works as a record-and-playback model.

2. Keyword-driven Framework
It is a scripting technique where you associate keywords with certain actions, such as opening or closing of a browser, mouse-click events, and others. Later on, in your test scripts, you can call these keywords to perform a specific step. Also, you will have a file where you will maintain all the keywords, along with the actions they perform.

3. Data-driven Framework
In a data-driven framework, all the test case data inputs are stored in the table or in extension files, including .xls, .xml, .csv, etc. While executing the test scripts, it will read the values from the table. With the help of this framework, you can perform both positive and negative test cases.

4. Page Object Model Framework
In the POM framework, you will create an object repository for the web UI elements. It allows you to call these methods later on without having to write the code again. Thus, it results in less verbosity, code reusability, and reduced time-consumption to write test scripts.

5. Modular Framework
The modular framework allows you to divide the test scripts into small, independent modules. These modules will interact with each other in a hierarchical manner to run large test scripts. This will also help you create the required test scenarios and test the scripts individually.




Automation Tool Best Practices
To get maximum ROI of automation, observe the following -
- The scope of Automation needs to be determined in detail before the start of the project. This sets expectations from Automation right.
- Select the right automation tool : A tool must not be selected based on its popularity, but it’s fit to the automation requirements.
- Choose an appropriate framework

- Scripting Standards - Standards have to be followed while writing the scripts for Automation. Some of them are-
	- Create uniform scripts, comments, and indentation of the code
	- Adequate Exception handling – How error is handled on system failure or unexpected behavior of the application.
	- User-defined messages should be coded or standardized for Error Logging for testers to understand.

- Measure metrics- Success of automation cannot be determined by comparing the manual effort with the automation effort but by also capturing the following metrics.
	- Percent of defects found
	- The time required for automation testing for each and every release cycle
	- Minimal Time is taken for release
	- Customer Satisfaction Index
	- Productivity improvement

The above guidelines if observed can greatly help in making your automation successful.



Benefits of Automation Testing
Following are the Test Automation benefits:
- 70% faster than the manual testing
- Wider test coverage of application features
- Reliable in results
- Ensure Consistency
- Saves Time and Cost
- Improves accuracy
- Human Intervention is not required while execution
- Increases Efficiency
- Better speed in executing tests
- Re-usable test scripts
- Test Frequently and thoroughly
- More cycle of execution can be achieved through automation
- Early time to market



Types of Automated Testing
- Smoke Testing
- Unit Testing
- Integration Testing
- Functional Testing
- Keyword Testing
- Regression Testing
- Data Driven Testing
- Black Box Testing



How to Choose an Automation Tool?
Selecting the right tool can be a tricky task. Following criterion will help you select the best tool for your requirement-
- Environment Support
- Ease of use
- Testing of Database
- Object identification
- Image Testing
- Error Recovery Testing
- Object Mapping
- Scripting Language Used
- Support for various types of test – including functional, test management, mobile, etc…
- Support for multiple testing frameworks
- Easy to debug the automation software scripts
- Ability to recognize objects in any environment
- Extensive test reports and results
- Minimize training cost of selected tools

Tool selection is one of biggest challenges to be tackled before going for automation. First, Identify the requirements, explore various tools and its capabilities, set the expectation from the tool and go for a Proof Of Concept.


Automation Testing Tools
1) Ranorex Studio
2) Kobiton
3) ZAPTEST
4) LambdaTest
5) Avo Assure
6) Keysight Eggplant
7) testRigor
8) Subject7
9) Selenium
10) Appium